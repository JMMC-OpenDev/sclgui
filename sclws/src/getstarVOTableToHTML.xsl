<?xml version="1.0"?>
<!--
********************************************************************************
* JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
********************************************************************************
DESCRIPTION
- transform VOTable into HTML files
-->
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
                xmlns="http://www.w3.org/1999/xhtml"
                xmlns:xhtml="http://www.w3.org/1999/xhtml"
                xmlns:VOT="http://www.ivoa.net/xml/VOTable/v1.1"
                xmlns:exslt="http://exslt.org/common"
                exclude-result-prefixes="exslt VOT">

    <xsl:output method="html" indent="no" encoding="UTF-8"
                omit-xml-declaration="yes"
                doctype-public="-//W3C//DTD XHTML 1.0 Transitional//EN"
                doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd" />


    <!-- FIELD/PARAM ID keys -->
    <xsl:key name="fieldID" match="/VOT:VOTABLE/VOT:RESOURCE/VOT:TABLE/VOT:FIELD" use = "@ID" />
    <xsl:key name="paramID" match="/VOT:VOTABLE/VOT:RESOURCE/VOT:TABLE/VOT:PARAM" use = "@ID" />

    <!-- TABLE proxy -->
    <xsl:variable name="table" select="/VOT:VOTABLE/VOT:RESOURCE/VOT:TABLE"/>

    <!-- Confidence and origin indexes defined for outputFormat 2013.7 (updated: 2017.5) -->
    <xsl:variable name="colorSets">
        <!-- confidence indexes generated by fr.jmmc.sclgui.calibrator.Confidence.main() -->
        <set>
            <key>c0</key>
            <value/>
            <title>NO</title>
            <description>NO confidence index</description>
            <color>none</color>
        </set>
        <set>
            <key>c1</key>
            <value/>
            <title>LOW</title>
            <description>LOW confidence index</description>
            <color>#6F6F6F</color>
        </set>
        <set>
            <key>c2</key>
            <value/>
            <title>MEDIUM</title>
            <description>MEDIUM confidence index</description>
            <color>#CCCCCC</color>
        </set>
        <set>
            <key>c3</key>
            <value/>
            <title>HIGH</title>
            <description>HIGH confidence index</description>
            <color>#ECECEC</color>
        </set>

        <!-- origin indexes (catalog) generated by fr.jmmc.sclgui.calibrator.Origin.main() -->
        <set>
            <key>o0</key>
            <value/>
            <title>NO CATALOG</title>
            <description/>
            <color>none</color>
        </set>
        <set>
            <key>o1</key>
            <value/>
            <title>MIXED CATALOG</title>
            <description/>
            <color>none</color>
        </set>
        <set>
            <key>o2</key>
            <value/>
            <title>computed</title>
            <description/>
            <color>none</color>
        </set>
        <set>
            <key>o3</key>
            <value>II/297/irc</value>
            <title>AKARI</title>
            <description>AKARI/IRC mid-IR all-sky Survey (ISAS/JAXA, 2010) confidence index</description>
            <color>#e680ff</color>
        </set>
        <set>
            <key>o4</key>
            <value>I/280</value>
            <title>ASCC-2.5</title>
            <description>All-sky Compiled Catalogue of 2.5 million stars confidence index</description>
            <color>#ffa680</color>
        </set>
        <set>
            <key>o5</key>
            <value>I/280B</value>
            <title>ASCC-2.5</title>
            <description>All-sky Compiled Catalogue of 2.5 million stars confidence index</description>
            <color>#ffa680</color>
        </set>
        <set>
            <key>o6</key>
            <value>V/50/catalog</value>
            <title>BSC</title>
            <description>Bright Star Catalogue, 5th Revised Ed. confidence index</description>
            <color>#99ff80</color>
        </set>
        <set>
            <key>o7</key>
            <value>II/225/catalog</value>
            <title>CIO</title>
            <description>Catalog of Infrared Observations, Edition 5 confidence index</description>
            <color>#fff280</color>
        </set>
        <set>
            <key>o8</key>
            <value>B/denis</value>
            <title>DENIS</title>
            <description>The DENIS database confidence index</description>
            <color>#80ffb3</color>
        </set>
        <set>
            <key>o9</key>
            <value>J/A+A/413/1037/table1</value>
            <title>J-K DENIS</title>
            <description>J-K DENIS photometry of bright southern stars confidence index</description>
            <color>#80ffd9</color>
        </set>
        <set>
            <key>o10</key>
            <value>I/196/main</value>
            <title>HIC</title>
            <description>Hipparcos Input Catalogue, Version 2 confidence index</description>
            <color>#80ffff</color>
        </set>
        <set>
            <key>o11</key>
            <value>I/239/hip_main</value>
            <title>HIP1</title>
            <description>Hipparcos and Tycho Catalogues (ESA 1997) confidence index</description>
            <color>#ff80cc</color>
        </set>
        <set>
            <key>o12</key>
            <value>I/311/hip2</value>
            <title>HIP2</title>
            <description>Hipparcos, the New Reduction (van Leeuwen, 2007) confidence index</description>
            <color>#ff80f2</color>
        </set>
        <set>
            <key>o13</key>
            <value>J/A+A/393/183/catalog</value>
            <title>LBSI</title>
            <description>Catalogue of calibrator stars for LBSI confidence index</description>
            <color>#80d9ff</color>
        </set>
        <set>
            <key>o14</key>
            <value>II/246/out</value>
            <title>2MASS</title>
            <description>2MASS All-Sky Catalog of Point Sources confidence index</description>
            <color>#bfff80</color>
        </set>
        <set>
            <key>o15</key>
            <value>J/A+A/433/1155</value>
            <title>Merand</title>
            <description>Calibrator stars for 200m baseline interferometry confidence index</description>
            <color>#80ff8c</color>
        </set>
        <set>
            <key>o16</key>
            <value>MIDI</value>
            <title>MIDI</title>
            <description>Photometric observations and angular size estimates of mid infrared interferometric calibration sources confidence index</description>
            <color>#80b2ff</color>
        </set>
        <set>
            <key>o17</key>
            <value>II/7A/catalog</value>
            <title>JP11</title>
            <description>UBVRIJKLMNH Photoelectric Catalogue confidence index</description>
            <color>#e6ff80</color>
        </set>
        <set>
            <key>o18</key>
            <value>V/36B/bsc4s</value>
            <title>SBSC</title>
            <description>The Supplement to the Bright Star Catalogue confidence index</description>
            <color>#808cff</color>
        </set>
        <set>
            <key>o19</key>
            <value>B/sb9/main</value>
            <title>SB9</title>
            <description>SB9: 9th Catalogue of Spectroscopic Binary Orbits confidence index</description>
            <color>#9980ff</color>
        </set>
        <set>
            <key>o20</key>
            <value>I/284</value>
            <title>USNO-B</title>
            <description>The USNO-B1.0 Catalog confidence index</description>
            <color>#ffcc80</color>
        </set>
        <set>
            <key>o21</key>
            <value>B/wds/wds</value>
            <title>WDS</title>
            <description>The Washington Visual Double Star Catalog confidence index</description>
            <color>#bf80ff</color>
        </set>
        <set>
            <key>o22</key>
            <value>I/280B</value>
            <title>ASCC-2.5</title>
            <description>All-sky Compiled Catalogue of 2.5 million stars confidence index</description>
            <color>#ffa680</color>
        </set>
        <set>
            <key>o23</key>
            <value>SIMBAD</value>
            <title>SIMBAD</title>
            <description>SIMBAD Astronomical Database confidence index</description>
            <color>#ff80a6</color>
        </set>
        <set>
            <key>o24</key>
            <value>II/328/allwise</value>
            <title>WISE</title>
            <description>The AllWISE data Release (Cutri+ 2013) confidence index</description>
            <color>#ff8080</color>
        </set>
    </xsl:variable>
    <!-- convert colorSet into node-set -->
    <xsl:variable name="colorNodeSet" select="exslt:node-set($colorSets)" />


    <!-- define as global variables the frequently used sets -->
    <xsl:variable name="fieldNodes" select="/VOT:VOTABLE/VOT:RESOURCE/VOT:TABLE/VOT:FIELD"/>
    <xsl:variable name="groupNodes" select="/VOT:VOTABLE/VOT:RESOURCE/VOT:TABLE/VOT:GROUP"/>


    <xsl:template match="/">
        <html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
            <head>
                <title>GetStar result</title>

                <!-- JMMC Web styles (partial) -->
                <style type="text/css">
                    body {
                        font-family: monospace;
                        background-color: white;
                    }
                    a:link, a:visited, a:hover {
                        color: #006699;
                        text-decoration: none;
                    }
                    .legend {
                        position: fixed;
                        bottom: 0px;
                        font-size: 50%;
                        background-color: white;
                    }
                    .legend td {
                        padding: 1px;
                    }
                    .box {
                        border: 1px solid #CCCCCC;
                        padding: 3px;
                        margin: 3px;
                    }
                    .centered {
                        text-align: center;
                    }
                    table {
                        border-spacing: 0px;
                        border-collapse: collapse;
                        border: 1px solid gray;
                    }
                    .coloredtable table {
                        color: #334D55;
                        border: 1px solid gray;
                    }
                    .coloredtable th {
                        border: 2px solid gray;
                        padding: 20px;
                        background-color: #F8F8F8;
                    }
                    .coloredtable td {
                        border: 1px solid #CCCCCC;
                        padding: 4px;
                        text-align: justify;
                        white-space: normal;
                    }
                    .coloredtable td.nowrap {
                        white-space: nowrap;
                    }
                </style>
                <xsl:call-template name="generateCSS" />

                <script src="http://www.jmmc.fr/scripts/jquery.min.js" type="text/javascript"></script>
                <script type="text/javascript">
                    $(document).ready(function() {
                    $('#toggle_log').click(function(){
                    $('#div_log').toggle(300);
                    });
                    });
                </script>

            </head>
            <body>
                <pre class="box">
                    <xsl:value-of select="/VOT:VOTABLE/VOT:DESCRIPTION/text()"/>
                </pre>

                <xsl:variable name="mappings">
                    <xsl:call-template name="generateMapping">
                        <xsl:with-param name="groups" select="$table/VOT:GROUP"/>
                    </xsl:call-template>
                </xsl:variable>

                <!-- convert mappings into node-set -->
                <xsl:variable name="mappingNodeSet" select="exslt:node-set($mappings)" />
                <!--
                                <xsl:message>
                                    <xsl:for-each select="$mappingNodeSet/*">
                                        mapping {
                                        name:            <xsl:value-of select="@name"/>
                                        valuePos:        <xsl:value-of select="@valuePos"/>
                                        originPos:       <xsl:value-of select="@originPos"/>
                                        confidencePos:   <xsl:value-of select="@confidencePos"/>
                                        originConst:     <xsl:value-of select="@originConst"/>
                                        confidenceConst: <xsl:value-of select="@confidenceConst"/>
                                        errorName:       <xsl:value-of select="@errorName"/>
                                        errorPos:        <xsl:value-of select="@errorPos"/>
                                        }
                                    </xsl:for-each>
                                </xsl:message>
                -->

                <table class="coloredtable centered nowrap">
                    <xsl:apply-templates select="$table/VOT:DATA/VOT:TABLEDATA/VOT:TR">
                        <xsl:with-param name="mappingNodeSet" select="$mappingNodeSet"/>
                    </xsl:apply-templates>
                </table>

                <table class="coloredtable legend">
                    <tr>
                        <xsl:call-template name="generateLegend" />
                    </tr>
                </table>

                <!-- server logs -->
                <xsl:if test="/VOT:VOTABLE/VOT:INFO">
                    <br/>
                    <div>
                        <input id="toggle_log" type="submit" value="show / hide log" />
                    </div>

                    <div id="div_log" style="display: none;">
                        <pre class="box">
                            <xsl:value-of select="/VOT:VOTABLE/VOT:INFO/text()"/>
                        </pre>
                    </div>

                    <br/>
                    <br/>
                </xsl:if>

                <br/>
                <br/>
            </body>
        </html>
    </xsl:template>


    <xsl:template match="VOT:TR">
        <xsl:param name="mappingNodeSet" />
        <tr>
            <th>Property</th>
            <th>Value</th>
            <th>(Unit)</th>
            <th>Description</th>
        </tr>
        <xsl:apply-templates select="$mappingNodeSet/*">
            <xsl:with-param name="trNode" select="."/>
        </xsl:apply-templates>
    </xsl:template>


    <!-- note: xsltproc requires xhtml namespace: match="xhtml:mapping" -->
    <xsl:template match="mapping|xhtml:mapping">
        <xsl:param name="trNode" />

        <xsl:if test="@valuePos">
            <xsl:variable name="iValuePos" select="number(@valuePos)"/>
            <xsl:variable name="field" select="$table/VOT:FIELD[$iValuePos]"/>
            <xsl:variable name="cellValue" select="$trNode/VOT:TD[$iValuePos]/text()"/>
            <tr>
                <td>
                    <a>
                        <xsl:if test="$field/VOT:DESCRIPTION">
                            <xsl:attribute name="title">
                                <xsl:value-of select="$field/VOT:DESCRIPTION/text()"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="$field/@name"/>
                    </a>
                </td>
                <td>
                    <xsl:if test="$cellValue">
                        <xsl:attribute name="class">
                            <xsl:text disable-output-escaping="yes">o</xsl:text>
                            <xsl:choose>
                                <xsl:when test="@originPos">
                                    <xsl:variable name="iOriginPos" select="number(@originPos)"/>
                                    <xsl:value-of disable-output-escaping="yes" select="$trNode/VOT:TD[$iOriginPos]/text()"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of disable-output-escaping="yes" select="@originConst"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text disable-output-escaping="yes"> c</xsl:text>
                            <xsl:choose>
                                <xsl:when test="@confidencePos">
                                    <xsl:variable name="iConfidencePos" select="number(@confidencePos)"/>
                                    <xsl:value-of disable-output-escaping="yes" select="$trNode/VOT:TD[$iConfidencePos]/text()"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of disable-output-escaping="yes" select="@confidenceConst"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
                        <xsl:variable name="link" select="$field/VOT:LINK/@href"/>
                        <xsl:choose>
                            <xsl:when test="$link">
                                <a>
                                    <xsl:attribute name="href">
                                        <xsl:variable name="linkParts">
                                            <!-- select="str:split($link,'${')"/>
                                                 - do not use str extension anymore but embeds a copy  of exslt template
                                                 - this solve some browsers issues (safari, chromium)
                                            -->
                                            <xsl:call-template name="split">
                                                <xsl:with-param name="string" select="$link"/>
                                                <xsl:with-param name="pattern" select="'${'"/>
                                            </xsl:call-template>
                                        </xsl:variable>

                                        <xsl:value-of select="exslt:node-set($linkParts)/*[1]"/>

                                        <xsl:for-each select="exslt:node-set($linkParts)/*">
                                            <xsl:if test="position() > 1">
                                                <xsl:variable name="fieldName" select="substring-before(.,'}')"/>
                                                <xsl:variable name="colIndex">
                                                    <xsl:call-template name="getFieldIndex">
                                                        <xsl:with-param name="fieldName">
                                                            <xsl:value-of select="$fieldName"/>
                                                        </xsl:with-param>
                                                    </xsl:call-template>
                                                </xsl:variable>
                                                <xsl:call-template name="url-encode">
                                                    <xsl:with-param name="str" select="$trNode/VOT:TD[number($colIndex)]/text()"/>
                                                </xsl:call-template>
                                                <xsl:value-of select="substring-after(.,'}')"/>
                                            </xsl:if>
                                        </xsl:for-each>
                                    </xsl:attribute>
                                    <xsl:value-of select="$cellValue"/>
                                </a>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:value-of select="$cellValue"/>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:if>
                </td>
                <td>
                    <xsl:if test="$field/@unit">
                        <xsl:value-of select="$field/@unit"/>
                    </xsl:if>
                </td>
                <td>
                    <xsl:if test="$field/VOT:DESCRIPTION">
                        <xsl:value-of select="$field/VOT:DESCRIPTION/text()"/>
                    </xsl:if>
                </td>
            </tr>
        </xsl:if>
        <xsl:if test="@errorPos">
            <xsl:variable name="iErrorPos" select="number(@errorPos)"/>
            <xsl:variable name="field" select="$table/VOT:FIELD[$iErrorPos]"/>
            <xsl:variable name="cellValue" select="$trNode/VOT:TD[$iErrorPos]/text()"/>
            <tr>
                <td>
                    <a>
                        <xsl:if test="$field/VOT:DESCRIPTION">
                            <xsl:attribute name="title">
                                <xsl:value-of select="$field/VOT:DESCRIPTION/text()"/>
                            </xsl:attribute>
                        </xsl:if>
                        <xsl:value-of select="$field/@name"/>
                    </a>
                </td>
                <td>
                    <xsl:if test="$cellValue">
                        <xsl:attribute name="class">
                            <xsl:text disable-output-escaping="yes">o</xsl:text>
                            <xsl:choose>
                                <xsl:when test="@originPos">
                                    <xsl:variable name="iOriginPos" select="number(@originPos)"/>
                                    <xsl:value-of disable-output-escaping="yes" select="$trNode/VOT:TD[$iOriginPos]/text()"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of disable-output-escaping="yes" select="@originConst"/>
                                </xsl:otherwise>
                            </xsl:choose>
                            <xsl:text disable-output-escaping="yes"> c</xsl:text>
                            <xsl:choose>
                                <xsl:when test="@confidencePos">
                                    <xsl:variable name="iConfidencePos" select="number(@confidencePos)"/>
                                    <xsl:value-of disable-output-escaping="yes" select="$trNode/VOT:TD[$iConfidencePos]/text()"/>
                                </xsl:when>
                                <xsl:otherwise>
                                    <xsl:value-of disable-output-escaping="yes" select="@confidenceConst"/>
                                </xsl:otherwise>
                            </xsl:choose>
                        </xsl:attribute>
                        <xsl:value-of select="$cellValue"/>
                    </xsl:if>
                </td>
                <td>
                    <xsl:if test="$field/@unit">
                        <xsl:value-of select="$field/@unit"/>
                    </xsl:if>
                </td>
                <td class="nowrap">
                    <xsl:if test="$field/VOT:DESCRIPTION">
                        <xsl:value-of select="$field/VOT:DESCRIPTION/text()"/>
                    </xsl:if>
                </td>
            </tr>
        </xsl:if>
    </xsl:template>


    <xsl:template name="getFieldIndex">
        <xsl:param name="fieldName"/>
        <xsl:for-each select="$fieldNodes">
            <xsl:if test="@name=$fieldName">
                <xsl:value-of select="concat(position(),' ')"/>
            </xsl:if>
        </xsl:for-each>
    </xsl:template>


    <xsl:template name="generateMapping">
        <xsl:param name="groups"/>
        <xsl:variable name="fields" select="$table/VOT:FIELD"/>
        <xsl:variable name="errorPattern" select="'_ERROR'"/>

        <xsl:for-each select="$groups">
            <xsl:element name="mapping">
                <xsl:for-each select="./VOT:FIELDref">
                    <xsl:variable name="field" select="key('fieldID', @ref)"/>
                    <xsl:variable name="fieldName" select="$field/@name"/>
                    <xsl:variable name="fieldUCD"  select="$field/@ucd"/>
                    <xsl:choose>
                        <xsl:when test="contains($fieldName, 'origin')">
                            <xsl:for-each select="$fields">
                                <xsl:if test="$fieldName = @name">
                                    <xsl:attribute name="originPos">
                                        <xsl:value-of select="position()"/>
                                    </xsl:attribute>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="contains($fieldName, 'confidence')">
                            <xsl:for-each select="$fields">
                                <xsl:if test="$fieldName = @name">
                                    <xsl:attribute name="confidencePos">
                                        <xsl:value-of select="position()"/>
                                    </xsl:attribute>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:when>
                        <!-- error property handling -->
                        <xsl:when test="substring($fieldUCD, (string-length($fieldUCD) - string-length($errorPattern)) + 1) = $errorPattern">
                            <xsl:attribute name="errorName">
                                <xsl:value-of select="$fieldName"/>
                            </xsl:attribute>
                            <xsl:for-each select="$fields">
                                <xsl:if test="$fieldName = @name">
                                    <xsl:attribute name="errorPos">
                                        <xsl:value-of select="position()"/>
                                    </xsl:attribute>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:when>
                        <xsl:when test="$fieldName != 'deletedFlag'">
                            <xsl:attribute name="name">
                                <xsl:value-of select="$fieldName"/>
                            </xsl:attribute>
                            <xsl:for-each select="$fields">
                                <xsl:if test="$fieldName = @name">
                                    <xsl:attribute name="valuePos">
                                        <xsl:value-of select="position()"/>
                                    </xsl:attribute>
                                </xsl:if>
                            </xsl:for-each>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>

                <xsl:for-each select="./VOT:PARAMref">
                    <xsl:variable name="param" select="key('paramID', @ref)"/>
                    <xsl:variable name="paramName" select="$param/@name"/>
                    <xsl:choose>
                        <xsl:when test="contains($paramName, 'origin')">
                            <xsl:attribute name="originConst">
                                <xsl:value-of select="$param/@value"/>
                            </xsl:attribute>
                        </xsl:when>
                        <xsl:when test="contains($paramName, 'confidence')">
                            <xsl:attribute name="confidenceConst">
                                <xsl:value-of select="$param/@value"/>
                            </xsl:attribute>
                        </xsl:when>
                    </xsl:choose>
                </xsl:for-each>
            </xsl:element>
        </xsl:for-each>
    </xsl:template>


    <xsl:template name="generateCSS">
        <style type="text/css">
            <xsl:for-each select="$colorNodeSet/*">
                <xsl:value-of select="concat('td.',xhtml:key,' { background-color : ',xhtml:color,' }&#10;')"/>
            </xsl:for-each>
        </style>
    </xsl:template>


    <xsl:template name="generateLegend">
        <xsl:for-each select="$colorNodeSet/*">
            <td class="{xhtml:key}">
                <a>
                    <xsl:if test="xhtml:description/text()">
                        <xsl:attribute name="title">
                            <xsl:value-of select="xhtml:description/text()"/>
                        </xsl:attribute>
                    </xsl:if>
                    <xsl:if test="xhtml:value/text()">
                        <xsl:attribute name="href">http://cdsarc.u-strasbg.fr/cgi-bin/VizieR?-source=<xsl:value-of select="xhtml:value/text()"/></xsl:attribute>
                    </xsl:if>
                    <xsl:value-of select="xhtml:title"/>
                </a>
            </td>
        </xsl:for-each>
    </xsl:template>

    <!-- Copied from exsl.org-->

    <xsl:template name="split">
        <xsl:param name="string" select="''" />
        <xsl:param name="pattern" select="' '" />
        <xsl:choose>
            <xsl:when test="not($string)" />
            <xsl:when test="not($pattern)">
                <xsl:call-template name="_split-characters">
                    <xsl:with-param name="string" select="$string" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <xsl:call-template name="_split-pattern">
                    <xsl:with-param name="string" select="$string" />
                    <xsl:with-param name="pattern" select="$pattern" />
                </xsl:call-template>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>

    <xsl:template name="_split-characters">
        <xsl:param name="string" />
        <xsl:if test="$string">
            <token>
                <xsl:value-of select="substring($string, 1, 1)" />
            </token>
            <xsl:call-template name="_split-characters">
                <xsl:with-param name="string" select="substring($string, 2)" />
            </xsl:call-template>
        </xsl:if>
    </xsl:template>

    <xsl:template name="_split-pattern">
        <xsl:param name="string" />
        <xsl:param name="pattern" />
        <xsl:choose>
            <xsl:when test="contains($string, $pattern)">
                <xsl:if test="not(starts-with($string, $pattern))">
                    <token>
                        <xsl:value-of select="substring-before($string, $pattern)" />
                    </token>
                </xsl:if>
                <xsl:call-template name="_split-pattern">
                    <xsl:with-param name="string" select="substring-after($string, $pattern)" />
                    <xsl:with-param name="pattern" select="$pattern" />
                </xsl:call-template>
            </xsl:when>
            <xsl:otherwise>
                <token>
                    <xsl:value-of select="$string" />
                </token>
            </xsl:otherwise>
        </xsl:choose>
    </xsl:template>


  <!--
       ISO-8859-1 based URL-encoding demo
       Written by Mike J. Brown, mike@skew.org.
       Updated 2015-10-24 (to update the license).

       License: CC0 <https://creativecommons.org/publicdomain/zero/1.0/deed.en>

         Also see http://skew.org/xml/misc/URI-i18n/ for a discussion of
         non-ASCII characters in URIs.
    -->

    <!-- Characters we'll support.
    We could add control chars 0-31 and 127-159, but we won't. -->
    <xsl:variable name="ascii"> !"#$%&amp;'()*+,-./0123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~</xsl:variable>
    <xsl:variable name="latin1">&#160;&#161;&#162;&#163;&#164;&#165;&#166;&#167;&#168;&#169;&#170;&#171;&#172;&#173;&#174;&#175;&#176;&#177;&#178;&#179;&#180;&#181;&#182;&#183;&#184;&#185;&#186;&#187;&#188;&#189;&#190;&#191;&#192;&#193;&#194;&#195;&#196;&#197;&#198;&#199;&#200;&#201;&#202;&#203;&#204;&#205;&#206;&#207;&#208;&#209;&#210;&#211;&#212;&#213;&#214;&#215;&#216;&#217;&#218;&#219;&#220;&#221;&#222;&#223;&#224;&#225;&#226;&#227;&#228;&#229;&#230;&#231;&#232;&#233;&#234;&#235;&#236;&#237;&#238;&#239;&#240;&#241;&#242;&#243;&#244;&#245;&#246;&#247;&#248;&#249;&#250;&#251;&#252;&#253;&#254;&#255;</xsl:variable>

    <!-- Characters that usually don't need to be escaped -->
    <xsl:variable name="safe">!'()*-.0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz~</xsl:variable>
    <xsl:variable name="hex" >0123456789ABCDEF</xsl:variable>

    <xsl:template name="url-encode">
        <xsl:param name="str"/>
        <xsl:if test="$str">
            <xsl:variable name="first-char" select="substring($str,1,1)"/>
            <xsl:choose>
                <xsl:when test="contains($safe,$first-char)">
                    <xsl:value-of select="$first-char"/>
                </xsl:when>
                <xsl:otherwise>
                    <xsl:variable name="codepoint">
                        <xsl:choose>
                            <xsl:when test="contains($ascii,$first-char)">
                                <xsl:value-of select="string-length(substring-before($ascii,$first-char)) + 32"/>
                            </xsl:when>
                            <xsl:when test="contains($latin1,$first-char)">
                                <xsl:value-of select="string-length(substring-before($latin1,$first-char)) + 160"/>
                            </xsl:when>
                            <xsl:otherwise>
                                <xsl:message terminate="no">Warning: string contains a character that is out of range! Substituting "?".</xsl:message>
                                <xsl:text>63</xsl:text>
                            </xsl:otherwise>
                        </xsl:choose>
                    </xsl:variable>
                    <xsl:variable name="hex-digit1" select="substring($hex,floor($codepoint div 16) + 1,1)"/>
                    <xsl:variable name="hex-digit2" select="substring($hex,$codepoint mod 16 + 1,1)"/>
                    <xsl:value-of select="concat('%',$hex-digit1,$hex-digit2)"/>
                </xsl:otherwise>
            </xsl:choose>
            <xsl:if test="string-length($str) &gt; 1">
                <xsl:call-template name="url-encode">
                    <xsl:with-param name="str" select="substring($str,2)"/>
                </xsl:call-template>
            </xsl:if>
        </xsl:if>
    </xsl:template>

</xsl:stylesheet>

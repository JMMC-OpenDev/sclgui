#!/usr/bin/python

#*******************************************************************************
# JMMC project
#
# "@(#) $Id: testPyAlxComputeMissingMagnitudeBrightObj.py,v 1.2 2005-02-25 15:46:43 gluck Exp $"
#
# History
# -------
# $Log: not supported by cvs2svn $
# gluck  21-Jan-2005  Created
#
#*******************************************************************************


#/**
# \file
# test for alxTestComputeMissingMagnitudeForBrightObj.
#
# \synopsis
# alxTestComputeMissingMagnitudeForBrightObj.py
#
# \warning To execute tests, when make gentest is run, alx.i file should contain
# following lines
#
#   // Some array helpers
#
#   %inline %{
#
#   mcsSTRING32 spType;
#   mcsFLOAT p1[alxNB_BANDS];
#   alxCONFIDENCE_INDEX p2[alxNB_BANDS];
#  
#   mcsCOMPL_STAT wrapper(){
#       alxComputeMagnitudesForBrightStar(spType,p1,p2);
#   }
#
#   void setP1(int index, float val){
#       p1[index]=val;
#   }
#   
#   void setP2(int index, alxCONFIDENCE_INDEX val){
#       p2[index]=val;
#   }
#   
#   float getP1(int index){
#       return p1[index];
#   }
#
#   alxCONFIDENCE_INDEX getP2(int index){
#       return p2[index];
#   }
#
#   %}
#
# */

import pyAlx

from pyAlx import *

print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"
print "WARNING: if the test does not work it is perhap because, part of code \
        is not present in alx.i (file generated by swig) because test mechanism \
        is not yet fully automatised. In this case copy by appening code block \
        from warning section of comment header to alx.i file"
print "!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"


#
# Stars corresponding to interpolated table lines
#
interpolatedStarsTuple = '62434', '20889', '93864', '18543', '60965'

#
# Test sets signification
#
# 1 -> B and V are known
# 2 -> B, V and K are known
# 3 -> B, V, I and K are known
testSetsSignificationDict = {'1' : 'B and V are known', 
                             '2' : 'B, V and K are known', 
                             '3' : 'B, V, I and K are known'}

#
# Band list
#
bandList = ["B", "V", "R", "I", "J", "H", "K", "L", "M"]

#
# Build expected results sets
#

# Open file
file = open('alxTestComputeMissingMagnitudeForBrightObj.res','r')

# initialize line index
firstLine = 1

# initialize tests set list
resultsDico = {}

# For each file line
for line in file:
    if firstLine == 1:
        # It's the first line
        # Get column items list
        resultsColItemList = line.split()
        firstLine = 0
    else:
        # It's not the first line
        # Get test set result value list
        resultsValuesList = line.split()
        # set test set result key tuple : star name
        key = resultsValuesList[0]
        # Set information values list : spectral type, line number, star type
        infoValuesTuple = resultsValuesList[1], resultsValuesList[2], \
                          resultsValuesList[3]
        # Set result values list
        paramValueList = resultsValuesList[4:]
        # Append test set results (tuple) to tests sets result dictionary
        resultsDico[key] = (infoValuesTuple, paramValueList)

#
# Build tests sets
#

# Open file
file = open('alxTestComputeMissingMagnitudeForBrightObj.input','r')

# initialize line index
firstLine = 1

# initialize tests set list
testsSetList = []

# For each file line
for line in file:
    if firstLine == 1:
        # It's the first line
        # Get column items list
        testSetsColItemList = line.split()
        firstLine = 0
    else:
        # It's not the first line
        # Get test set value list
        testsSetValuesList = line.split()
        # set test set key tuple : test set type, star name
        keyTuple = testsSetValuesList[0], testsSetValuesList[1]
        # Set parameters values list
        paramValueList = testsSetValuesList[2:]
        # Append a test set (dictionary) to tests sets list (dictionary list)
        testsSetList.append({keyTuple : paramValueList})


#
# Execute tests set
#
for testSet in testsSetList:
    # Get test set type
    testSetNb = testSet.keys()[0][0]
    # Get test set signification
    testSetSignificance = testSetsSignificationDict[str(testSetNb)]
    # Get tested star name
    TestedStarName = testSet.keys()[0][1]
    print '\n*****************************************************************'
    print 'Jeu de test', testSetNb, ': ', testSetSignificance, \
          '----> star name = ', TestedStarName, '\n'
    
    print '=> Infos:'
    print '   ------'
    # tested star spectral type
    spectralType = resultsDico[TestedStarName][0][0]
    # Line where to find star in configuration file
    lineNb = resultsDico[TestedStarName][0][1]
    # tested star type
    starType = resultsDico[TestedStarName][0][2]
    print 'Spectral type: ', spectralType
    print 'Numero of line:', lineNb
    print 'Star type:', starType
    
    print '\n=> Input data:'
    print '   -----------'

    # Assign string parameter
    spType = testSet.values()[0][0]
    pyAlx.cvar.spType = spType
    print 'spType = ', pyAlx.cvar.spType

    # Assign magnitudes float array
    for band, index, val in zip(bandList, 
                                range(0, alxNB_BANDS), 
                                testSet.values()[0][1:]):
        setP1(index, float(val))
        print "mag"+band, " = ", '%.2f' % getP1(index)

    # alxComputeMagnitudesForBrightStar function call
    res = wrapper()

    # Test if it is an interpolated star
    if TestedStarName in interpolatedStarsTuple:
        interpolated = '<-- interpolation'
    else:
        interpolated = ''
        
    # Observed results
    # from R to M band (omitting B, V bands)
    for band, index in zip(bandList[2:], range(2, alxNB_BANDS)):
        setattr(__builtins__, "mag"+band+"obs", getP1(index))
        setattr(__builtins__, "confIdx"+band, getP2(index))

    # Expected results
    # from R to M band (omitting B, V bands)
    for band, index in zip(bandList[2:], range(2, alxNB_BANDS)):
        setattr(__builtins__, "mag"+band+"exp", 
                float(resultsDico[TestedStarName][1][index]))
   
    # Difference between observed and expected
    # from R to M band (omitting B, V bands)
    for band in bandList[2:]:
        setattr(__builtins__, "diff"+band, 
                eval("mag"+band+"obs") - eval("mag"+band+"exp"))

    # Print and format results
    # from R to M band (omitting B, V bands)
    print '\n=> Results: '
    print '   --------'

    print 'Band'.center(6), 'Confidence index'.center(18), \
          'Observed (O)'.center(13), 'Expected (E)'.center(13), \
          'Difference O - E'.center(18)
    for band in bandList[2:]:
        print band.center(6), \
              str('%i' % eval("confIdx"+band)).center(18), \
              str('%.2f' % eval("mag"+band+"obs")).center(13), \
              str('%.2f' % eval("mag"+band+"exp")).center(13), \
              str('%.2f' % eval("diff"+band)).center(18)

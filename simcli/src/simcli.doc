================================================================================
                        SIMBAD client routines
                            F. Ochsenbein
                              M. Wenger
                      Release 3.3  -  June 27th, 1995
================================================================================

The aim of this package is to provide a set of routines allowing to
write applications having access to SIMBAD data through the network in
a client/server mode.

A SIMBAD server process is running on the SIMBAD machine, waiting for
clients. These clients send commands and get the queried data returned
through UNIX sockets.

Different routines are used to manage the connection itself, the queries
and the returned data.

This package is in a test phase and should not be distributed for the
moment.

Modifications history is in the file README

New lines in this file are marked by a '*' in the first column.
-------------------------------------------------------------------------------

1) Connection/disconnection:
===========================

  a) Connection
  -------------

  int handle = simbad_connect(char *simbad_node, char *service, 
                                                  char *userid, char *password)
  simbad_node: defines which simbad node to use
               "" for the default node provided in the routine
               THIS SHOULD NOT BE SET DIFFERENTLY FROM "" WITHOUT CDS REQUEST
  service:     defines the service number
               "" for the default service provided in the routine
               THIS SHOULD NOT BE SET DIFFERENTLY FROM "" WITHOUT CDS REQUEST
  userid:      should be a standard SIMBAD userid.
               This parameter is mandatory.
  password:    is the password corresponding to the SIMBAD userid.
               This parameter is mandatory.
  handle:      to be used in the other routines
                        -1 in case of error.

  Example:     hh = simbad_connect("","","your-userid","your-password") ;


  b) Disconnection
  ----------------

  int status = simbad_disconnect(int handle)
  handle:      returned by simbad_connect

  Example:     simbad_disconnect(hh) ;


2) Simbad Query will be achieved within loops:
=============================================

   a. Send the question to Simbad
   ------------------------------

      int nitems = simbad_query(int handle, char *question, char *options)

        handle:   returned by simbad_connect
        question: can be one of the following:
                    - object designation (identifier)
                    - ~ident : for query around this identifier.
                      (cooradius option can be used to define the search radius)
                    - coordinates: equatorial coordinates
                                   galactical coordinates (prefixed by g=)
                                   ecliptical coordinates (prefixed by e=)
                    - bibliographical reference code (it is case insensitive)
                    - filter (NOT YET IMPLEMENTED)
                    - an empty string (""), allowing to send only an 
                      option string.
        options:  They are made of a string containing items separated by ';'.
                  Each item has the format: optionname=value
                  Already available options are:
                     cooradius=radius             for queries by coordinates
                     bibyears=low_year/high_year  for year restriction on bibl.
        nitems:   number of objects existing in Simbad which match the question 
                    0    if none
                         This value is returned if the question string is empty.
                   -1    if error. In that case, an error message is returned
                                   by the function simbad_error(hand)

        Examples: 
           nb = simbad_query(hh,"sirius","") ;
           nb = simbad_query(hh,"~hd 1","cooradius=1");
           nb = simbad_query(hh,"12 34 +56 11",
                                "cooradius=0 20;bibyears=1980/1993");
           nb = simbad_query(hh,"g=123.4-45.3","");
           nb = simbad_query(hh,"1994aj.107.1t","");


   b. Retrieve one of the objects in the list
   ------------------------------------------

      int found = simbad_retrieve(int handle, int number)

        handle:   returned by simbad_connect
        number:   number of objects to look at (0 <= number <= nitems)
                  A value of zero asks for the next object.
        found:    number of objects remaining in the list (including the
                  current one), 0 for no more, -1 for error
                  in case of random object selection, the returned value
                  is the number remaining until the end.

        Example:  i = simbad_retrieve(hh,0) ;


   c. Retrieve which individual data are available for one object
   --------------------------------------------------------------
      
       char *astrotypes = simbad_telldata(int handle)

        handle:     returned by simbad_connect
        astrotypes: blank-separated list of astrotypes for which one
                    or more values can be retrieved. The items
                    can be scanned by e.g. strtok(). 
                    See the "astrotypes" appendix for a list of all defined
                    types and the data formats.
                    Ex. of a possible string: "C J M.B M.V S I"
                        for an object having a type, coordinates, blue and
                        visual magnitude, spectral type and identifiers.

        Example:    atypes = simbad_telldata(hh) ;


   d. Retrieve individual data for one object
   ------------------------------------------

      int ndata = simbad_findata(int handle, char *astrotype, char *option)

        handle:    returned by simbad_connect
        astrotype: specifies the data we want to retrieve, 
                    see the "astrotypes" appendix.
        option:    further parametrisation/restrictions to astrotype, TBD
                   See also simbad_query() for options definition.
        ndata:     tells how many data exist of specified astrotype

        Example:   ndata = simbad_findata(hh,"B","") ;


   e. Retrieve finally the data
   ----------------------------

      char *value = simbad_getdata(int handle, int number)

        handle:    returned by simbad_connect
        number:    the number of the datum to look at (0 <= number <= ndata),
                   value 0 asking for the next
        value:     result as a character string
                   empty string ("") for no data,
                   NULL for error

        Example:   datastr = simbad_getdata(hh,0) ;
        

   f. Get the error code and message
   ----------------------------------

      When an error occurs, the client routines return -1 or NULL (for
      simbad_telldata() and simbad_getdata()). The actual error can be
      retrieved through these two functions:

      int num = simbad_errno(int hand)

        handle:    returned by simbad_connect()
        num:       The error code. Values are:
                       1      network error
                       2      server error
                       3      client error
                      11      simbad error


      char *text = simbad_error(hand)

        handle:    returned by simbad_connect()
        text:      string containing the error message
                   It may be several lines, separated by '\n' chars.



Example:

   A typical session to get the positions and the designations of the 
   objects around a given position would look like:

        handle = simbad_connect(node, service, user, passwd);
        ...

        nobj = 0 ;
        nitems = simbad_query (handle, "05 12 -72 30", "");
        while (nitems-- > 0) 
        {
            while (simbad_retrieve(handle, 0) == 1)  /* Next Object in list */
            {
               printf("Object #%d: ", ++nobj);
               simbad_findata(handle, "J", ""); 
               puts(simbad_getdata(handle, 1)); /* Print coordinates */
               nid = simbad_findata(handle, "I", "");
               while (nid-- > 0) 
                  printf("  %s\n", simbad_getdata(handle, 0));
            }
        }
        ...

        simbad_disconnect(handle);


3) A special command would allow to get the most up-to-date definitions
   concerning the various specifiers  ("astrotypes") for simbad_findata
==================================

   int status = simbad_getinfo(int handle, char *question, char *option)

   NOT YET IMPLEMENTED.





Appendix I: Preliminary list of astrotypes
===========================================

   **************************************************
   ******** NOTICE THAT THIS LIST WILL CHANGE *******
   **************************************************


code           definition                           format
------------------------------------------------------------------------------

"C"     object classification (type)      Ascii string. max 15 chars
                                          shorter abbreviations may be defined
                                          Ex: C PulsV*WVir


"J"     B2000 coordinates                 Decimal degrees with precision code:
        In some future: J2000.            AAA.AAAAAAA sDD.DDDDDDD (P)
                                           P = 0    degree
                                               1    1/10th of degree
                                               2    minute
                                               3    1/10th of minute
                                               4    second
                                               5    1/10th of second
                                               6    1/100th of second
                                               7    1/1000th of second
                                          Ex: J  37.9118839 +89.2643200 (6)


"M.B"   Blue magnitude                    MM.mmm:DVn
                                           flags:   ':'  not homogenized to UBV
                                                    'D'  joint magn. in a 
                                                         multiple system
                                                    'V'  variable magnitude.
                                                    n=1  amplitude of 1/100 mag
                                                      2  amplitude of 1/10 mag
                                                      3  amplitude of 1 mag
                                                      4  amplitude > 1 mag
                                                      ?  suspected variable
                                          Ex: M.B  2.62  V1


"M.V"   Visual magnitude                  MM.mmm:DVn
                                           Same flags as "M.B"
                                          Ex: M.V  2.02  V1


"S"     Spectral class                    Ascii string (max: 36 chars)
        (only for stars)                  Ex: S F7:Ib-IIvar


"T"     Morphological classification      Ascii string (max: 36 chars)
        (only for galaxies)               Ex: T Sb


"P"     Proper motions                    +pp.ppp  [ssss]  +pp.ppp  [ssss]
        (only for stars)                  (mua.cos.d  err   mudelta   err )
                                          Unit in arcsec/year, for both r.a. &
                                          dec. Errors are in 1/1000arcsec/year
                                          Ex: P  +0.046  [  25]   -0.004  [  25]


"D"     Dimensions                        dd.dd  r.rr aaa (i)
        for galaxies: log(D25) log(R25)   lD25   lR25  pa  (incl. code)
                                          Ex: D  3.13  0.36  35 (6)


"I"     Identification (alias)            Ascii string. 
                                          Max non definitive: 40 chars
                                          Ex: I GEN# +1.00008890A


"I.0"   Selected identification           Ascii string
                                          Max non definitive: 40 chars
                                          Ex: I.0 HD 123456


"O.cat" Measurements                      Ascii strings
        'cat' stands for the catalogue    There is one line per measurement.
        name of the measurements.         The first line is always the header
        Available catalogs are:           line, describing the records.
        CEL,GCRV,GEN,GJ,HBET,HGAM,IRAS,   Max length: 205 bytes (may change).
        IRC,JP11,MK,PLX,PM,POS,ROT,RVEL,  A complete description of the measu-
        SAO,TD1,UBV,UVBY,VAR,Z            rements can be found in the SIMBAD
                                          user's guide, appendix F.


"B"     Bibliographical code              YYYYJJJJJVVVVMPPPPL
                                          (see 14.4.1, user's guide 1.2)
                                          Ex: B 1987ApJ...315...28H


"R.R"   Bibliographical code              Same as "B"


"R.A"   Bib. ref: author list             Ascii string. Max around 600 chars ?
                 Ex: R.A HARWIT M., HOUCK J.R., SOIFER B.T. and PALUMBO G.G.C.


"R.J"   Bib. ref: journal identification  Ascii string. Max around 300 chars ?
                 Ex: R.J Astrophys. J., 315, 28-45 (1987)


"R.T"   Bib. ref: article title           Ascii string. Max around 600 chars ?
                 Ex: R.T The most luminous far-infrared extragalactic sources.

"R.E"   Bib. ref: erratum                 Ascii string. Max around 100 chars ?

"R.X"   Bib. ref: commentary              Ascii string. Max around 100 chars ?

"R.I"   Bib. ref: flags (abstract,table)  Ascii string. Max around 100 chars ?

"R.F"   Bib. ref: CDS files availability  Ascii string. Max around 100 chars ?

"R.C"   Bib. ref: Dictionary comment      Ascii string. Max around 100 chars ?

================================================================================


/*******************************************************************************
* JMMC project
*
* "@(#) $Id: vobs.doc,v 1.3 2004-10-15 07:52:12 scetre Exp $"
*
* who       when         what
* --------  -----------  -------------------------------------------------------
* scetre    25-Aug-2004  Created
*
*
*******************************************************************************/

/**
\mainpage vobs : C++ asking module of the Search Calibrators

\bdesc
Module of query of the software Search Calibrators.

\ddesc
According to the user request, this module will built an asking and used it
with a XML parser in order to sent a list of stars. It is defined several
objects :
\li vobsREQUEST contains all user's constraints
\li vobsSTAR represents the star object with several properties as the
coordinates or the magnitude...
\li vobsSTAR_LIST the star list object where is defined methods to use the
list
\li vobsCATALOG catalog of star which build an URL where to find data. Each
catalog of the CDS have specific data so it is define several object as
vobsCATALOG :
  - vobsCATALOG_ASCC : All Sky Compiled Catalog
  - vobsCATALOG_CHARM : Catalog of High Angular Resolution M
  - vobsCATALOG_CIO : Catalog of Infrared Observations
  - vobsCATALOG_DENIS : The DENIS database
  - vobsCATALOG_HIC : Hipparcos Input Catalog
  - vobsCATALOG_LBSI : Catalog of calibrator for LBSI
  - vobsCATALOG_MASS : The 2MASS All Sky Catalog of Point Sources
  - vobsCATALOG_PHOTO : PHOTOelectric catalog
  - vobsCATALOG_BSC : Bright Star Catalog
  - vobsCATALOG_SBSC : Supplement to the BSC
\li vobsPARSER Analyser of XML file in order to extract from this format the
data
\li vobsSCENARIO this object run several action according to the user's constraints
\li vobsVIRTUAL_OBSERVATORY 

\n
\ex
Exemple of a usage of vobs.
\code

#include <iostream>
using namespace std;

#include "mcs.h"
#include "log.h"
#include "err.h"

#include "vobsSTAR.h"
#include "vobsSTAR_LIST.h"
#include "vobsREQUEST.h"
#include "vobsVIRTUAL_OBSERVATORY.h"
#include "vobsPrivate.h"

int main(int argc, char *argv[])
{
    mcsInit(argv[0]);

    logSetStdoutLogLevel(logEXTDBG);
    
    logInfo("Starting ...");
    vobsREQUEST request;

    // Affect the kind of request
    if (request.SetKindOfRequest(1)==FAILURE)
    {
        errDisplayStack();
        errCloseStack();
        exit(EXIT_FAILURE); 
    }

    if ((request.SetConstraint(STAR_NAME_ID,"ETA TAU") == SUCCESS) &&
        (request.SetConstraint(STAR_WLEN_ID,"0.65") == SUCCESS) &&
        (request.SetConstraint(STAR_MAGNITUDE_ID,"2.87") == SUCCESS) &&
        (request.SetConstraint(MAGNITUDE_RANGE_ID,"1..5") == SUCCESS) &&
        (request.SetConstraint(SEARCH_BOX_RA_ID,"03+47+29.08") == SUCCESS) &&
        (request.SetConstraint(SEARCH_BOX_DEC_ID,"+24+06+18.5") == SUCCESS) &&
        (request.SetConstraint(STAR_EXPECTED_VIS_ID,"0.349") == SUCCESS) &&
        (request.SetConstraint(STAR_MAX_ERR_VIS_ID,"0.035") == SUCCESS) &&
        (request.SetConstraint(OBSERVED_BAND_ID,"V") == SUCCESS ))
    {
        // Check if the request is correctly build
        if (request.Check()==mcsTRUE)
        {
            // Display of the request correctly build
            request.Display();
        }
        else
        {
            errDisplayStack();
            errCloseStack();
            exit(EXIT_FAILURE);
        }
    }
    else 
    {
        errDisplayStack();
        errCloseStack();
        exit(EXIT_FAILURE);
    }
    errDisplayStack();

    vobsSTAR_LIST starList;

    vobsVIRTUAL_OBSERVATORY vobs;

    if (vobs.Research(request, starList)==FAILURE)
    {
        errDisplayStack();
        errCloseStack();
        exit(EXIT_FAILURE);
    }
    /*else
    {
        starList.Display();
    }*/

    errDisplayStack();
    
    logInfo("Exiting ...");
    exit(EXIT_SUCCESS);

}

\endcode


*/

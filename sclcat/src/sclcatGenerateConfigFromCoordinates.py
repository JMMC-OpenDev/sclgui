#!/usr/bin/python
#*******************************************************************************
# JMMC project ( http://www.jmmc.fr ) - Copyright (C) CNRS.
#*******************************************************************************

#/**
# @file
# Generate the configuration file for the calibrators batch research from the
# given header and coordinates list files.
#
# @synopsis
# sclcatGenerateConfigFromCoordinates headerFile.cfg coordinatesList.txt outputFile.cfg
# 
# @details
# This script generate a '.cfg' file which is used for the calibrators research.
# It starts by inserting the given header file. Then, the output file is
# fulfilled with boxes based on the given coordinates list.
# */

""" This script aims to generate a '.cfg' file from the given header and coordinates list files
"""

import sys
import os
import datetime



def readCoordinatesFromFile(filename):
    """ Returns a list of boxes coordinates
    -  filename the path to the file containing RA/DEC coordinates
    """
    # Check file validity
    if not os.path.isfile(filename):
        print 'Error : no file found at %s' % (filename)
        return

    # Result list
    boxList = []

    # Read each line of the coordinates file
    nbOfLines = 0
    nbOfCoordinates = 0
    for line in open(filename, 'r').readlines() :
        nbOfLines += 1

        # Each line contains coordinates separated with blanks
        coordinates = line.split()

        # Each line must contains 2 tokens, otherwise skip it
        if len(coordinates) == 2 :
            nbOfCoordinates += 1

            # The first token is the RA coordinate
            ra  = coordinates[0]
            # The second token is the DEC coordinate
            dec = coordinates[1]

            # Put read coordinates in the output list
            boxList.append([ra, dec])

    if nbOfCoordinates == nbOfLines :
        print 'All %d coordinates succesfully read.' % (nbOfCoordinates)
    else :
        print 'WARNING : Found %d coordinates in %d lines.' % (nbOfCoordinates , nbOfLines)

    return boxList



def generateBodyFromBoxes(boxList):
    """ Write SerachCal configuration list with coordinates of boxes of the given size
    -  boxList list of [ra, dec]
    """
    outputBuffer = ""

    for box in boxList :
        boxIdentifier = "box_RA%s_DEC%s"%(box[0], box[1])

        outputBuffer += "[%s]\n" % boxIdentifier
        outputBuffer += "file = %s.vot\n" % boxIdentifier
        outputBuffer += "objectName = toto\n"
        outputBuffer += "diffRa = %d\n" % raRange
        outputBuffer += "diffDec = %d\n" % decRange
        outputBuffer += "ra = %s\n" % box[0]
        outputBuffer += "dec = %s\n" % box[1]
        outputBuffer += "\n"

    return outputBuffer



def generateHeaderFromTemplate(filename):
    """ Returns a string forged from local data and header template file
    -  filename the path to the file containing the header template
    """
    # Check file validity
    if not os.path.isfile(filename):
        print 'Error : no file found at %s' % (filename)
        return

    outputBuffer = ""

    # Add script name
    outputBuffer = "# File generated by sclcatGenerateConfigFromCoordinates"
    outputBuffer += "\n"

    # Add generation timestamp
    today = datetime.date.today()
    outputBuffer += "# at %s"%today
    outputBuffer += "\n"

    # Append header template content
    outputBuffer += open(filename, 'r').read()

    return outputBuffer




# Check parameter number
if len(sys.argv) != 4 :
    print 'Usage : sclcatGenerateConfigFromCoordinates headerFilename coordinatesFilename outputFilename'
    sys.exit(1)
header      = sys.argv[1]
coordinates = sys.argv[2]
output      = sys.argv[3]

# Parse coordinates list
print 'Reading coordinates list from file %s' % coordinates
boxes = readCoordinatesFromFile(coordinates)

# Generate header
print 'Generating headers from template file %s' % header
outputContent = generateHeaderFromTemplate(header)

# Generate body
raRange = 180 # 12 min
decRange = 60 # 1 degree
print 'Generating body for (%d * %d) boxes.' % (raRange, decRange)
outputContent += generateBodyFromBoxes(boxes)

# Write content to output file
print 'Writting configuration to file %s' % output
open(output, 'w').write(outputContent)

print "Done."
sys.exit(0)

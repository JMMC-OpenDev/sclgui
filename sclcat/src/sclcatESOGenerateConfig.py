#!/usr/bin/python
#*******************************************************************************
# JMMC project
#
# "@(#) $Id: sclcatESOGenerateConfig.py,v 1.1 2008-07-11 12:56:55 lafrasse Exp $"
#
# History
# -------
# $Log: not supported by cvs2svn $
#*******************************************************************************

#/**
# @file
# Generate the configuration file for the ESO calibrators research. 
#
# @synopsis
# sclcatESOGenerateConfig
# 
# @details
# This script generate the sclcatESO.cfg file which is used for the calibrators
# research. It starts by inserting the static header file sclcatESOHeader.cfg .
# Then, the sky is mosaiced in order to prepare each needed SearchCal requests.
#
# @usedfiles
# @filename <b>../config/sclcatESOHeader.cfg :</b> SearchCal parameters file
# description which is the future header of the sclcatESO.cfg file
# @filename <b>../tmp/tailBatch.cfg :</b> temporary file for calling SearchCal
# by batch for several objects. It is the body of the sclcatESO.cfg
# @filename <b>../config/sclcatESO.cfg :</b>  ESO configuration file
# (sclcatESOHeader.cfg + ../tmp/tailBatch)
# @filename <b>../tmp/command.dat :</b>  temporary file where are store
# generated body of the final sclcatESO.cfg file
#
# */

""" This script aims to generate the ESO calibrator catalog configuration file
"""

import datetime



def ArcmintoHMS(arcmin, sep=":"):
    """ Converts RA arcmin to Hours Minutes Seconds h:m:s . 
         ':' can be replaced by given separator as 2nd arg """
    degrees=arcmin/60
    h=int(degrees/15)
    m=int(((degrees/15)-h)*60)
    s=((((degrees/15)-h)*60)-m)*60
    return ""+str(h)+sep+str(m)+sep+str(s)

def ArcmintoDMS(arcmin, sep=":"):
    """ Converts DEC arcmin to Degrees Minutes Seconds d:m:s . 
         ':' can be replaced by given separator as 2nd arg """
    sign=1
    if arcmin != 0:
        sign=arcmin/abs(arcmin)
    degrees=abs(arcmin/60)
    d=int(degrees)
    m=int(((degrees)-d)*60)
    s=((((degrees)-d)*60)-m)*60
    d=d*sign
    return ""+str(d)+sep+str(m)+sep+str(s)

def computeSkyBoxes(raBoxSize, decBoxSize):
    """ Returns a list of coordinates of boxes of the given size
    -  raBoxSize    arcmin
    -  decBoxSize   arcmin
    """
    boxList=[]
    for ra in range(0, 360 * 60, raBoxSize):
        for dec in range(-90 * 60, 90 * 60, decBoxSize):
            boxList.append([ArcmintoHMS(ra), ArcmintoDMS(dec)])
    return boxList

def writeConfigurationList(boxList):
    """ Write SerachCal configuration list with coordinates of boxes of the given size
    -  boxList list of [ra, dec]
    """
    str=""
    i=0
    for box in boxList:
        ident="box_RA%s_DEC%s"%(box[0], box[1])
        str+="[%s]\n"%ident
        str+="file = %s.vot\n"%ident
        str+="objectName = %s\n"%ident
        str+="file = %s.vot\n"%ident
        str+="diffRa = %d\n"%raRange
        str+="diffDec = %d\n"%decRange
        str+="ra = %s\n"%box[0]
        str+="dec = %s\n"%box[1]
        str+="mag = 6\n"
        str+="\n"
    return str

headerFile=open("../config/sclcatESOHeader.cfg")
contentFile=open("../tmp/command.dat")
tailFile="../tmp/tailBatch.cfg"
sclcatESO=open("../config/sclcatESO.cfg", "w")

print "Generate configuration file into '%s'..."%sclcatESO.name

# Write date of creation

fileContent="# File generated by sclcatESOGenerateConfig.sh"
fileContent+="\n"

today=datetime.date.today()
fileContent+="# at %s"%today
fileContent+="\n"

# Append header file content
fileContent+=headerFile.read()

raRange=3600 # arcmin -> 4 hour
raRange=360
decRange=1800 # arcmin -> 30 degrees
decRange=180
boxes=computeSkyBoxes(raRange, decRange)

fileContent+=writeConfigurationList(boxes)

# Write the resulting file content to disk
sclcatESO.write(fileContent)

print "Done."

